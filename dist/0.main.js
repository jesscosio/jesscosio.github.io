(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{143:function(e,n,t){var a=t(133),o=t(145);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},s=(a(o,i),o.locals?o.locals:{});e.exports=s},144:function(e,n,t){"use strict";var a=t(143);t.n(a).a},145:function(e,n,t){(n=t(134)(!1)).push([e.i,'\nul[data-v-68781400] {\n    margin: 0;\n    padding: 0;\n}\na[data-v-68781400] {\n    padding: 15px;\n    margin: 0;\n    flex-basis: 100%;\n    font-size: 16px;\n    font-weight: 400;\n    font-family: "Monaco", Helvetica, sans-serif;\n    color: white;\n    text-decoration: none;\n    text-transform: uppercase;\n}\n\n',""]),e.exports=n},147:function(e,n,t){var a=t(133),o=t(152);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},s=(a(o,i),o.locals?o.locals:{});e.exports=s},148:function(e,n,t){"use strict";var a=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"nav-wrapper",attrs:{id:"navBar"}},[t("nav",[t("ul",[t("router-link",{attrs:{to:"/"}},[e._v("Home")]),e._v(" "),t("router-link",{attrs:{to:"/about"}},[e._v("About Me")]),e._v(" "),t("a",{attrs:{href:"https://github.com/jesscosio"}},[e._v("Github")]),e._v(" "),t("a",{attrs:{href:"https://www.linkedin.com/in/jesscosio/"}},[e._v("LinkedIn")]),e._v(" "),t("a",{attrs:{href:"https://www.calpoly.edu/"}},[e._v("CalPoly- SLO")])],1)])])};a._withStripped=!0;var o={name:"NavBar"},i=(t(144),t(5)),s=Object(i.a)(o,a,[],!1,null,"68781400",null);s.options.__file="src/components/navBar.vue";n.a=s.exports},151:function(e,n,t){"use strict";var a=t(147);t.n(a).a},152:function(e,n,t){(n=t(134)(!1)).push([e.i,"\n.bio[data-v-b392c64c] {\n    font-size: 14px;\n    font-weight: 400;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\nimg[data-v-b392c64c] {\n    float: right;\n    max-height: 250px;\n    display: inline;\n}\n#about[data-v-b392c64c] a {\n   color: black;\n}\n\n",""]),e.exports=n},157:function(e,n,t){"use strict";t.r(n);var a=function(){var e=this.$createElement,n=this._self._c||e;return n("div",{attrs:{id:"about"}},[n("navBar"),this._v(" "),n("img",{attrs:{id:"aboutImg","data-src":"../assets/heraldsquare.jpg",alt:"heraldsquare"}}),this._v(" "),this._m(0)],1)};a._withStripped=!0;var o={name:"AboutMe",components:{navBar:t(148).a},mounted:function(){t.e(1).then(t.t.bind(null,156,7)).then((function(e){document.getElementById("aboutImg").src=e.default}))}},i=(t(151),t(5)),s=Object(i.a)(o,a,[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("span",{staticClass:"bio"},[t("p",[e._v("Contact • EMAIL : jessica.cosio@icloud.com • MOBILE : (805) 865-6148 \n            ")]),t("p",[e._v("EDUCATION • CALIFORNIA POLYTECHNIC STATE UNIVERSITY SAN LUIS OBISPO, CA B.S. Software Engineering")]),e._v(" "),t("p",[e._v("EXPERIENCE• MACY’S INC. Software Engineer")]),e._v(" "),t("p",[e._v("\n                Winter 2015\nSAN FRANCISCO, CA\nAug 2015 - Present\no Full stack web development – Javascript, Node, Backbone, HTML, CSS/SCSS, responsive, Angular, Java, Jboss, Maven\no A/B testing and KPI tracking through web analytics implementations\no Analytics using IBM coremetrics\no High priority/urgent code delivery and defect fixes\no Unit test coverage and performance test base lining behind delivered features o Strong emphasis on process and delivery- especially using lean principles\no Web app marketing research - emphasis on privacy and UX implications o Daily documentation of work as a steady habit\no Weekly showcase of work to business stakeholders\n            ")]),e._v(" "),t("p",[e._v("Tech Star Executive Development Program Aug 2015 – Jan 2016\no Balanced platform development with human resources managed training sessions\no Delivered monthly showcase to program stakeholders, managers, and colleagues\no Mobile Platform and Content Engineering- creation of common components for web developers, executed library updates")]),e._v(" "),t("p",[e._v("• AUTOLIV – NIGHT VISION Goleta, CA\nSoftware Intern June 2015-Aug 2015\no Insured validity of gain calibration testing software used for night vision cameras o Created test documentation for verification of calibration software\no Developed small script for one off need from EE lab\nPROJECTS\n• MACY’S VOICE LAB: Researched and developed voice applications for Google Home and Alexa platforms utilizing Google Cloud and AWS Lambda. Assisted with architecting a single codebase and creating module components.\n• SHOPPABLE CONTENT LEAN LAB : Responsible for running experiments and studying behavior of Macy’s customers on the responsive website to gain insight on producing\nvaluable content recommendations.\n• MOBILE WEB INNOVATION LEAN LAB : Responsible for running front-end experiments and studying the behavior of our mobile web customers to gain insight into providing an enhanced mobile shopping experience. Utilized A/B testing techniques and worked under principles of Fast, Clean, and Modern.\n• GOOGLE AMP HACKATHON, NYC 2018: Macy’s homepage written in AMP.\n• MACY’S HACKATHON TOP 5 CONTESTANT, 2017: Thumbs up! implemented a tap and zoom capability on the mobile website’s browse and search pages for viewing a high resolution image\nof the product.\n• MACY’S IDEA LAB, MEN’ S WEARHOUSE ONLINE TUXEDO RENTAL PROJECT: Assisted in the “crawl” phase of a new partnership with Men’s Wearhouse that would ease the rental process for groups including the process for sizing and ordering.\n• MOBILE WEB PLATFORM : Developed code and took ownership alongside a veteran team for optimizing the Macy's website for mobile/tablet devices. ")])])}],!1,null,"b392c64c",null);s.options.__file="src/about/AboutMe.vue";n.default=s.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,