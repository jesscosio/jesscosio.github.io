(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{143:function(e,n,t){var a=t(133),o=t(145);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},s=(a(o,i),o.locals?o.locals:{});e.exports=s},144:function(e,n,t){"use strict";var a=t(143);t.n(a).a},145:function(e,n,t){(n=t(134)(!1)).push([e.i,'\nul[data-v-68781400] {\n    margin: 0;\n    padding: 0;\n}\na[data-v-68781400] {\n    padding: 15px;\n    margin: 0;\n    flex-basis: 100%;\n    font-size: 16px;\n    font-weight: 400;\n    font-family: "Monaco", Helvetica, sans-serif;\n    color: white;\n    text-decoration: none;\n    text-transform: uppercase;\n}\n\n',""]),e.exports=n},147:function(e,n,t){var a=t(133),o=t(152);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},s=(a(o,i),o.locals?o.locals:{});e.exports=s},148:function(e,n,t){"use strict";var a=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"nav-wrapper",attrs:{id:"navBar"}},[t("nav",[t("ul",[t("router-link",{attrs:{to:"/",exact:""}},[e._v("Home")]),e._v(" "),t("router-link",{attrs:{to:"/about",exact:""}},[e._v("About Me")]),e._v(" "),t("a",{attrs:{href:"https://github.com/jesscosio"}},[e._v("Github")]),e._v(" "),t("a",{attrs:{href:"https://www.linkedin.com/in/jesscosio/"}},[e._v("LinkedIn")]),e._v(" "),t("a",{attrs:{href:"https://www.calpoly.edu/"}},[e._v("CalPoly- SLO")])],1)])])};a._withStripped=!0;var o={name:"NavBar"},i=(t(144),t(5)),s=Object(i.a)(o,a,[],!1,null,"68781400",null);s.options.__file="src/components/navBar.vue";n.a=s.exports},151:function(e,n,t){"use strict";var a=t(147);t.n(a).a},152:function(e,n,t){(n=t(134)(!1)).push([e.i,"\n#about[data-v-b392c64c] {\n    text-align: center;\n}\n.bio[data-v-b392c64c] {\n    font-size: 14px;\n    font-weight: 400;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\nimg[data-v-b392c64c] {\n    display: block;\n    max-height: 250px;\n    display: inline;\n    margin-top: 10px;\n}\n#about[data-v-b392c64c] a {\n   color: black;\n}\n\n",""]),e.exports=n},157:function(e,n,t){"use strict";t.r(n);var a=function(){var e=this.$createElement,n=this._self._c||e;return n("div",{attrs:{id:"about"}},[n("navBar"),this._v(" "),n("img",{attrs:{id:"aboutImg","data-src":"../assets/heraldsquare.jpg",alt:"heraldsquare"}}),this._v(" "),this._m(0)],1)};a._withStripped=!0;var o={name:"AboutMe",components:{navBar:t(148).a},mounted:function(){t.e(1).then(t.t.bind(null,156,7)).then((function(e){document.getElementById("aboutImg").src=e.default}))}},i=(t(151),t(5)),s=Object(i.a)(o,a,[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"bio"},[t("p",[e._v(" Contact • EMAIL : jessica.cosio@icloud.com • MOBILE : (805) 865-6148 ")]),e._v(" "),t("h2",[e._v(" EDUCATION ")]),t("h3",[e._v("CALIFORNIA POLYTECHNIC STATE UNIVERSITY SAN LUIS OBISPO, CA B.S. Software Engineering")]),e._v(" "),t("h2",[e._v(" EXPERIENCE")]),e._v(" "),t("h3",[e._v("Macy’s Inc. Software Engineer San Francisco, CA Aug 2015 - Present")]),e._v(" "),t("p",[t("br"),e._v("• Full stack web development – [javascript, html, css/scss, node, npm, webpack, vue, git, react, typescript, express, backbone, responsive]\n"),t("br"),e._v("• A/B testing and KPI tracking through web analytics implementations\n"),t("br"),e._v("• Analytics using IBM coremetrics\n"),t("br"),e._v("• High priority/urgent code delivery and defect fixes\n"),t("br"),e._v("• Unit test coverage and performance test base lining behind delivered features \n"),t("br"),e._v("• Strong emphasis on process and delivery- especially using lean principles\n"),t("br"),e._v("• Web app UX research - investigated implications, and proceeded with implementation \n"),t("br"),e._v("• Daily documentation of work as a steady habit\n"),t("br"),e._v("• Weekly showcase of work to business stakeholders\n            ")]),e._v(" "),t("h3",[e._v("Macy's Inc. Tech Star Executive Development Program San Francisco, CA Aug 2015 – Jan 2016")]),e._v(" "),t("p",[e._v("\n• Mobile web platform development team - [javascript,jquery, html,css/scss, handlebars, hapi, grunt]\n"),t("br"),e._v(" • Contributions to Macy's mobile single page webapp\n"),t("br"),e._v(" • Human resources sponsored training sessions\n"),t("br"),e._v("• Delivered monthly showcase to program stakeholders, managers, and colleagues\n"),t("br"),e._v("• Mobile Platform and Content Engineering- creation of common components for web developers, executed library updates")]),e._v(" "),t("h3",[e._v("Autoliv – Night Vision Goleta, CA Software Intern June 2015-Aug 2015")]),e._v(" "),t("p",[e._v("\n• Performed validation of newly updated gain calibration software on production floor equipment  "),t("br"),e._v("\n• Wrote documentation used for the validation of software used to calibrate night vision cameras "),t("br"),e._v("\n• Installed updates of calibration software on production floor equipment"),t("br"),e._v("\n• Delivered script to EE lab - [powershell]"),t("br")]),e._v(" "),t("h2",[e._v("PROJECTS")]),e._v(" "),t("p",[e._v("\n• MACY'S STORE HUB: [javascript, vue, vuex, node, npm, webpack]\n"),t("br"),e._v("• MACY'S OMNICLIENT STYLIST TOOL: [ javascript, node, angular, java, jboss, maven, sql ] \n"),t("br"),e._v("• MACY’S VOICE LAB: [typescript, node, express, firebase, google cloud, aws-lambda, actions on google, alexa v2] Researched and developed voice applications for Google Home and Alexa platforms utilizing Google Cloud and AWS Lambda. Assisted with developing a shareable component that developers could extend \n"),t("br"),e._v("• SHOPPABLE CONTENT LEAN LAB : [javascript, node, backbone, handlebars] Responsible for running experiments and studying behavior of Macy’s customers on the responsive website to gain insight on producing\nvaluable content recommendations.\n"),t("br"),e._v("• MOBILE WEB INNOVATION LEAN LAB : [javascript, node, backbone, handlebars] Responsible for running front-end experiments and studying the behavior of our mobile web customers to gain insight into providing an enhanced mobile shopping experience. Utilized A/B testing techniques and worked under principles of Fast, Clean, and Modern\n"),t("br"),e._v("• GOOGLE AMP HACKATHON, NYC 2018: Macy’s homepage written in AMP\n"),t("br"),e._v("• MACY’S HACKATHON TOP 5 CONTESTANT, 2017: Thumbs up! implemented a tap and zoom capability on the mobile website’s browse and search pages for viewing a high resolution image\nof the product\n"),t("br"),e._v("• MACY’S IDEA LAB, MEN’ S WEARHOUSE ONLINE TUXEDO RENTAL PROJECT: Developed front-end for “crawl” phase of a new partnership with Men’s Wearhouse that would ease the rental process for groups including the process for sizing and ordering\n"),t("br"),e._v("• MOBILE WEB PLATFORM : Developed code and took ownership alongside a veteran team for optimizing the Macy's website for mobile/tablet devices\n ")])])}],!1,null,"b392c64c",null);s.options.__file="src/about/AboutMe.vue";n.default=s.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,