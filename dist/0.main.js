(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{143:function(e,n,a){var t=a(133),o=a(145);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var s={insert:"head",singleton:!1},i=(t(o,s),o.locals?o.locals:{});e.exports=i},144:function(e,n,a){"use strict";var t=a(143);a.n(t).a},145:function(e,n,a){(n=a(134)(!1)).push([e.i,'\nul[data-v-68781400] {\n    margin: 0;\n    padding: 0;\n}\na[data-v-68781400] {\n    padding: 15px;\n    margin: 0;\n    flex-basis: 100%;\n    font-size: 16px;\n    font-weight: 400;\n    font-family: "Monaco", Helvetica, sans-serif;\n    color: white;\n    text-decoration: none;\n    text-transform: uppercase;\n}\n\n',""]),e.exports=n},147:function(e,n,a){var t=a(133),o=a(152);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var s={insert:"head",singleton:!1},i=(t(o,s),o.locals?o.locals:{});e.exports=i},148:function(e,n,a){"use strict";var t=function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"nav-wrapper",attrs:{id:"navBar"}},[a("nav",[a("ul",[a("router-link",{attrs:{to:"/",exact:""}},[e._v("Home")]),e._v(" "),a("router-link",{attrs:{to:"/about",exact:""}},[e._v("About")]),e._v(" "),a("a",{attrs:{href:"https://github.com/jesscosio"}},[e._v("Github")]),e._v(" "),a("a",{attrs:{href:"https://www.linkedin.com/in/jesscosio/"}},[e._v("LinkedIn")]),e._v(" "),a("a",{attrs:{href:"https://www.calpoly.edu/"}},[e._v("CalPoly- SLO")])],1)])])};t._withStripped=!0;var o={name:"NavBar"},s=(a(144),a(5)),i=Object(s.a)(o,t,[],!1,null,"68781400",null);i.options.__file="src/components/navBar.vue";n.a=i.exports},151:function(e,n,a){"use strict";var t=a(147);a.n(t).a},152:function(e,n,a){(n=a(134)(!1)).push([e.i,"\n#about[data-v-b392c64c] {\n    text-align: center;\n}\nspan[data-v-b392c64c] {\n    font-weight: 550;\n}\n.bio[data-v-b392c64c] {\n    font-size: 14px;\n    font-weight: 400;\n    font-family: 'Helvetica', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n}\nimg[data-v-b392c64c] {\n    display: block;\n    max-height: 250px;\n    display: inline;\n    margin-top: 10px;\n}\n#about[data-v-b392c64c] a {\n   color: black;\n}\n\n",""]),e.exports=n},158:function(e,n,a){"use strict";a.r(n);var t=function(){var e=this.$createElement,n=this._self._c||e;return n("div",{attrs:{id:"about"}},[n("navBar"),this._v(" "),n("img",{attrs:{id:"aboutImg","data-src":"../assets/heraldsquare.jpg",alt:"heraldsquare"}}),this._v(" "),this._m(0),this._v(" "),n("navBar")],1)};t._withStripped=!0;var o={name:"AboutMe",components:{navBar:a(148).a},mounted:function(){a.e(1).then(a.t.bind(null,156,7)).then((function(e){document.getElementById("aboutImg").src=e.default}))}},s=(a(151),a(5)),i=Object(s.a)(o,t,[function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("div",{staticClass:"bio"},[a("p",[e._v(" EMAIL : jessica.cosio@icloud.com MOBILE : (805) 865-6148 ")]),e._v(" "),a("h2",[e._v(" EDUCATION ")]),a("h3",[e._v("CALIFORNIA POLYTECHNIC STATE UNIVERSITY SAN LUIS OBISPO, CA B.S. Software Engineering")]),e._v(" "),a("h2",[e._v(" EXPERIENCE")]),e._v(" "),a("h3",[e._v("Macy’s Inc. Software Engineer San Francisco, CA Aug 2015 - March 2020")]),e._v(" "),a("p",[a("br"),e._v(" Full stack web development – [javascript, html, css/scss, node, npm, webpack, vue, git, react, typescript, express, backbone, responsive]\n"),a("br"),e._v(" A/B testing and KPI tracking using web analytics implementations\n"),a("br"),e._v(" Analytics using IBM coremetrics\n"),a("br"),e._v(" High priority/urgent code delivery and defect fixes\n"),a("br"),e._v(" Unit test coverage and performance test base lining behind delivered features \n"),a("br"),e._v(" Strong emphasis on process and delivery- especially using lean principles\n"),a("br"),e._v(" Web app UX research - established a/b test result implications, and proceeded with implementation \n"),a("br"),e._v(" Daily documentation of work as a steady habit\n"),a("br"),e._v(" Weekly showcase of work to business stakeholders\n            ")]),e._v(" "),a("h3",[e._v("Macy's Inc. Tech Star Executive Development Program San Francisco, CA Aug 2015 – Jan 2016")]),e._v(" "),a("p",[e._v("\n Mobile web platform development team - [javascript,jquery, html,css/scss, handlebars, hapi, grunt]\n"),a("br"),e._v("  Contributions to Macy's mobile single page webapp\n"),a("br"),e._v("  Human resources sponsored training sessions\n"),a("br"),e._v(" Delivered monthly showcase to program stakeholders, managers, and colleagues\n"),a("br"),e._v(" Mobile Platform and Content Engineering - creation of common components for web developers, executed library updates")]),e._v(" "),a("h3",[e._v("Autoliv – Night Vision Goleta, CA Software Intern June 2015-Aug 2015")]),e._v(" "),a("p",[e._v("\n Performed validation of newly updated gain calibration software on production floor equipment  "),a("br"),e._v("\n Wrote documentation used for the validation of software used to calibrate night vision cameras "),a("br"),e._v("\n Installed updates of calibration software on production floor equipment"),a("br"),e._v("\n Worked with EE lab to deliver script that transferred template files - [powershell]"),a("br")]),e._v(" "),a("h2",[e._v("PROJECTS")]),e._v(" "),a("p",[a("span",[e._v("MACY'S STORE HUB")]),e._v(": [javascript, vue, vuex, node, npm, webpack] Front End development for a Macy's internal tool that manages Macy's store event information\n"),a("br"),e._v(" "),a("span",[e._v("MACY'S OMNICLIENT STYLIST TOOL")]),e._v(": [ javascript, node, angular, java, jboss, maven, sql ] Full stack development for a Macy's internal webapp used by Macy's store stylists to communicate with their clients via text\n"),a("br"),e._v(" "),a("span",[e._v("MACY’S VOICE LAB")]),e._v(": [typescript, node, express, firebase, google cloud, aws-lambda, actions on google, alexa v2] Researched and developed voice applications for Google Home and Alexa platforms utilizing Google Cloud and AWS Lambda. \nAssisted in developing a shareable component that developers could extend in order to minimize code duplication and for fast delivery\n"),a("br"),e._v(" "),a("span",[e._v("SHOPPABLE CONTENT LEAN LAB")]),e._v(": [javascript, node, backbone, handlebars] Responsible for running experiments and studying behavior of Macy’s customers on the responsive website to gain insight on producing\nvaluable content recommendations\n"),a("br"),e._v(" "),a("span",[e._v("MOBILE WEB INNOVATION LEAN LAB")]),e._v(": [javascript, node, backbone, handlebars] Responsible for running front-end A/B experiments, studying the signals of our mobile web customers and implementing features that provide an enhanced mobile shopping experience\n"),a("br"),e._v(" "),a("span",[e._v("GOOGLE AMP HACKATHON, NYC 2018")]),e._v(": Macy’s homepage written in AMP\n"),a("br"),e._v(" "),a("span",[e._v("MACY’S HACKATHON TOP 5 CONTESTANT, 2017")]),e._v(": Thumbs up! implemented a tap and zoom capability on the mobile website’s browse and search pages for viewing a high resolution image\nof the product\n"),a("br"),e._v(" "),a("span",[e._v("MACY’S IDEA LAB, MEN’ S WEARHOUSE ONLINE TUXEDO RENTAL PROJECT")]),e._v(": Developed front-end for “crawl” phase of a new partnership with Men’s Wearhouse that would ease the rental process for groups including the process for sizing and ordering\n"),a("br"),e._v(" "),a("span",[e._v("MOBILE WEB PLATFORM")]),e._v(": Developed code and took ownership alongside a veteran team for optimizing the Macy's website for mobile/tablet devices\n ")])])}],!1,null,"b392c64c",null);i.options.__file="src/about/AboutMe.vue";n.default=i.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,